
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fhyhyfoqzpkzkxbkqcdp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZoeWh5Zm9xenBremt4YmtxY2RwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NjY0ODIsImV4cCI6MjA2MjE0MjQ4Mn0.NluvL4FiDbgKXu_avMaLUgyzQayV4_15vrH64vWfok0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Define types for our RPC functions
declare module '@supabase/supabase-js' {
  interface SupabaseClient<Database> {
    rpc<ResponseType = any>(
      fn: 'admin_login' | 'create_admin' | 'delete_admin' | 'add_initial_admins',
      params?: object,
      options?: object
    ): { data: ResponseType; error: Error | null };
  }
}

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    flowType: 'implicit', // More secure auth flow
  },
  global: {
    headers: {
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'X-Client-Info': 'supabase-js/2.x'
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    },
    timeout: 60000, // Increased timeout for better reliability
    headers: {
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache'
    }
  },
  db: {
    schema: 'public'
  },
  // Add request handling to sanitize inputs and catch potential injection attacks
  fetch: (url, options) => {
    // Log auth-related activity for security monitoring (but not auth details)
    if (url.includes('/auth/')) {
      console.log(`Auth operation requested: ${new URL(url).pathname}`);
    }
    return fetch(url, {
      ...options,
      credentials: 'same-origin'
    });
  }
});

// Add monitoring for suspicious activities
let failedRequests = 0;
const originalFetch = supabase.fetch.bind(supabase);
supabase.fetch = async (url, options) => {
  try {
    const response = await originalFetch(url, options);
    if (response.status === 401 || response.status === 403) {
      failedRequests++;
      if (failedRequests > 5) {
        console.error('Multiple unauthorized access attempts detected');
        // Reset to avoid triggering multiple times
        failedRequests = 0;
      }
    } else if (response.ok) {
      // Reset on successful requests
      failedRequests = 0;
    }
    return response;
  } catch (error) {
    console.error('Supabase request error:', error);
    throw error;
  }
};
