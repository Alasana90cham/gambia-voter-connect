
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://fhyhyfoqzpkzkxbkqcdp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZoeWh5Zm9xenBremt4YmtxY2RwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NjY0ODIsImV4cCI6MjA2MjE0MjQ4Mn0.NluvL4FiDbgKXu_avMaLUgyzQayV4_15vrH64vWfok0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Define types for our RPC functions with simplified typing to avoid excessive depth
interface RPCResponse<T = any> {
  data: T;
  error: Error | null;
}

// Extend SupabaseClient with simplified typing
declare module '@supabase/supabase-js' {
  interface SupabaseClient<Database> {
    rpc(
      fn: 'admin_login' | 'create_admin' | 'delete_admin' | 'add_initial_admins',
      params?: object,
      options?: object
    ): RPCResponse;
  }
}

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined,
    flowType: 'implicit', // More secure auth flow
  },
  global: {
    headers: {
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'X-Client-Info': 'supabase-js/2.x'
    },
    fetch: (url, options) => {
      // Optimized timeout for large dataset operations - reduced from 20 minutes to 5 minutes
      const timeout = 300000; 
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);
      
      return fetch(url, {
        ...options,
        signal: controller.signal,
      }).finally(() => clearTimeout(timeoutId));
    }
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 50, // Reduced for better performance
    }
  }
});

// Enhanced connection pooling and request monitoring
let failedRequests = 0;
const maxRetries = 3; // Reduced retries for faster failures
const connectionPool = new Set();
const maxPoolSize = 100; // Reduced pool size for better performance

// Simplified handleRequestWithRetry function to avoid excessive type instantiation
const handleRequestWithRetry = async (requestFn) => {
  let retries = 0;
  
  while (retries < maxRetries) {
    try {
      if (connectionPool.size >= maxPoolSize) {
        const delay = 50 * Math.pow(2, retries);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
      const requestId = Date.now() + Math.random();
      connectionPool.add(requestId);
      
      const result = await requestFn();
      
      connectionPool.delete(requestId);
      return result;
    } catch (error) {
      retries++;
      console.error(`Supabase request failed (attempt ${retries}/${maxRetries}):`, error);
      
      if (retries >= maxRetries) {
        console.error('Maximum retries reached for Supabase request');
        throw error;
      }
      
      const baseDelay = 100 * Math.pow(2, retries);
      const jitter = Math.random() * 200;
      await new Promise(resolve => setTimeout(resolve, baseDelay + jitter));
    }
  }
};

// Monitor for authentication failures
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_OUT') {
    console.log('User signed out');
    failedRequests = 0; // Reset counter on sign out
  } else if (event === 'USER_UPDATED') {
    console.log('User session updated');
  }
});

// Enhance original auth methods with retry logic
const originalSignIn = supabase.auth.signInWithPassword;
supabase.auth.signInWithPassword = async (credentials) => {
  return handleRequestWithRetry(async () => {
    try {
      const response = await originalSignIn(credentials);
      if (response.error) {
        failedRequests++;
        if (failedRequests > 5) {
          console.error('Multiple failed login attempts detected');
          setTimeout(() => { failedRequests = 0; }, 15 * 60 * 1000);
        }
      } else {
        failedRequests = 0;
      }
      return response;
    } catch (error) {
      console.error('Supabase auth error:', error);
      throw error;
    }
  });
};

// Optimized batch operations for handling large datasets
export const batchOperation = async (items, operationFn, batchSize = 5000) => {
  const batches = [];
  
  for (let i = 0; i < items.length; i += batchSize) {
    batches.push(items.slice(i, i + batchSize));
  }
  
  const results = [];
  for (const batch of batches) {
    try {
      const result = await operationFn(batch);
      results.push(result);
    } catch (error) {
      console.error('Batch operation failed:', error);
      throw error;
    }
  }
  
  return results;
};

// Highly optimized fetchPaginated function
export const fetchPaginated = async <T>(
  tableName: 'admins' | 'voters',
  options: {
    filters?: Record<string, any>;
    orderBy?: string;
    ascending?: boolean;
  } = {}, 
  pageSize = 50000  // Significantly increased page size for fewer requests
): Promise<T[]> => {
  const { filters = {}, orderBy = 'created_at', ascending = true } = options;
  
  console.log(`Starting optimized fetch for ${tableName} with large page size: ${pageSize}`);

  try {
    // Create a single optimized query
    let query = supabase.from(tableName).select('*');
    
    // Add ordering
    query = query.order(orderBy, { ascending });
    
    // Apply filters
    Object.entries(filters).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        // @ts-ignore
        query = query.eq(key, value);
      }
    });

    console.log(`Fetching ${tableName} records with optimized query`);
    
    const { data, error } = await query;
    
    if (error) {
      console.error(`Error fetching ${tableName} records:`, error);
      throw error;
    }
    
    console.log(`Successfully retrieved ${data?.length || 0} records`);
    return (data as T[]) || [];
    
  } catch (error) {
    console.error('Error in optimized fetchPaginated:', error);
    throw error;
  }
};
